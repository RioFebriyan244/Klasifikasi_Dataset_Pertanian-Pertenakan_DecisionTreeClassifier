# -*- coding: utf-8 -*-
"""Klasifikasi_Dataset_Pertanian & Perternakan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MKDGe3tsn8zEMrZQ_8bcwI7U0yTu5MtI

# Import Library
Pada tahap ini, dilakukan import library yang dibutuhkan untuk menjalankan proses machine learning. Library seperti `pandas`, `numpy`, `matplotlib`, dan `seaborn` digunakan untuk data handling dan visualisasi. Library `sklearn` digunakan untuk preprocessing, pembuatan model, dan evaluasi.
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

"""# Load Dataset
. Dataset dimuat dari file CSV berisi 1000 data kuantitatif terkait pertanian dan peternakan. Data ini mencakup fitur-fitur seperti luas lahan, produksi, jumlah ternak, hingga umur panen. Dataset digunakan untuk membangun model klasifikasi jenis komoditas.
"""

df = pd.read_csv('https://raw.githubusercontent.com/RioFebriyan244/Klasifikasi_Dataset_Pertanian-Pertenakan_DecisionTreeClassifier/refs/heads/main/Pertanian_Peternakan.csv')

"""# Exploratory Data Analysis (EDA)
Tahapan ini bertujuan memahami struktur data, tipe data, dan melihat distribusi nilai dari setiap fitur. Visualisasi seperti histogram dan heatmap korelasi digunakan untuk menemukan pola, outlier, dan hubungan antar variabel.
Insight awal: Beberapa fitur seperti "Produksi" dan "Jumlah Ternak" memiliki range nilai besar, dan terdapat korelasi positif antara berat rata-rata ternak dan jumlah ternak.
"""

df.head(15)

df.info()

df.duplicated().sum()

df.isnull().sum()

print(df["Jenis Komoditas"].value_counts())

# Distribusi target (Jenis Komoditas)
plt.figure(figsize=(8,5))
sns.countplot(data=df, x='Jenis Komoditas', order=df['Jenis Komoditas'].value_counts().index)
plt.title('Distribusi Jenis Komoditas')
plt.xlabel('Jenis Komoditas')
plt.ylabel('Jumlah')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""# Data Preparation
Fitur target `Jenis Komoditas` diubah ke bentuk numerik menggunakan LabelEncoder. Fitur numerik dinormalisasi menggunakan StandardScaler untuk menyamakan skala data.
Dataset dibagi menjadi data latih dan data uji (80:20) dengan stratifikasi untuk menjaga distribusi kelas target tetap seimbang.

"""

# Label encoder
label_encoder = LabelEncoder()
df["Label"] = label_encoder.fit_transform(df["Jenis Komoditas"])
X = df[["Luas Lahan (ha)", "Produksi (ton)", "Jumlah Ternak (ekor)",
        "Berat Rata-rata Ternak (kg)", "Umur Panen (hari)"]]
y = df["Label"]

# Preprocessing
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

num_classes = len(label_encoder.classes_)
num_classes

"""# Modeling: Decision Tree
Model Decision Tree digunakan sebagai baseline model. Parameter seperti `criterion='entropy'` dan `max_depth=10` digunakan untuk menghindari overfitting.
Model dilatih menggunakan data training dan kemudian diuji pada data testing.

"""

# 7. Decision Tree Modeling
clf = DecisionTreeClassifier(criterion='entropy', max_depth=10, random_state=42)
clf.fit(X_train, y_train)

"""# Evaluasi Model
Model diuji menggunakan metrik akurasi. Hasil akurasi dari model Decision Tree pada data uji adalah sebesar 67%.
Meskipun hasilnya belum ideal (target â‰¥ 85%), model memberikan dasar untuk iterasi model berikutnya. Selanjutnya, akan dilakukan pengujian model lain seperti Random Forest dan tuning hyperparameter untuk peningkatan performa.

"""

#  Evaluation
y_pred = clf.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print(f"Akurasi: {acc:.2f}")
print("Classification Report:\n", classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d',
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_, cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

# Visualisasi Tree
plt.figure(figsize=(20, 10))
plot_tree(clf, feature_names=X.columns, class_names=label_encoder.classes_, filled=True, rounded=True, fontsize=10)
plt.title("Decision Tree Visualization")
plt.show()

"""# Kesimpulan
Proyek ini membangun model klasifikasi komoditas berbasis fitur kuantitatif pertanian dan peternakan. Model Decision Tree memberikan hasil akurasi sebesar 67%.
Next step: Eksperimen dengan model lain (Random Forest, KNN), serta menambahkan fitur eksternal seperti lokasi, musim, atau harga pasar untuk meningkatkan akurasi.

"""